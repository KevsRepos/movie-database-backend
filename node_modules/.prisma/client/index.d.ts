
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model categories
 */

export type categories = {
  categoryId: string
}

/**
 * Model favorites
 */

export type favorites = {
  favoritesId: number
  userId: string
  movieId: string
}

/**
 * Model movies
 */

export type movies = {
  movieId: string
  name: string
  category: string
  releaseDate: Date | null
  movieLength: number
  description: string
}

/**
 * Model userdata
 */

export type userdata = {
  userId: string
  createdAt: Date
  email: string
  name: string
  surname: string
  password: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.categories.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.categories.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.$executeRaw``, values will be escaped automatically
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.$executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.$queryRaw``, values will be escaped automatically
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.$queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.categories`: Exposes CRUD operations for the **categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.categoriesDelegate<GlobalReject>;

  /**
   * `prisma.favorites`: Exposes CRUD operations for the **favorites** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favorites
    * const favorites = await prisma.favorites.findMany()
    * ```
    */
  get favorites(): Prisma.favoritesDelegate<GlobalReject>;

  /**
   * `prisma.movies`: Exposes CRUD operations for the **movies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Movies
    * const movies = await prisma.movies.findMany()
    * ```
    */
  get movies(): Prisma.moviesDelegate<GlobalReject>;

  /**
   * `prisma.userdata`: Exposes CRUD operations for the **userdata** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Userdata
    * const userdata = await prisma.userdata.findMany()
    * ```
    */
  get userdata(): Prisma.userdataDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.27.0
   * Query Engine version: cdba6ec525e0213cce26f8e4bb23cf556d1479bb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    categories: 'categories',
    favorites: 'favorites',
    movies: 'movies',
    userdata: 'userdata'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model categories
   */


  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    count: CategoriesCountAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
    max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesMinAggregateOutputType = {
    categoryId: string | null
  }

  export type CategoriesMaxAggregateOutputType = {
    categoryId: string | null
  }

  export type CategoriesCountAggregateOutputType = {
    categoryId: number
    _all: number
  }


  export type CategoriesMinAggregateInputType = {
    categoryId?: true
  }

  export type CategoriesMaxAggregateInputType = {
    categoryId?: true
  }

  export type CategoriesCountAggregateInputType = {
    categoryId?: true
    _all?: true
  }

  export type CategoriesAggregateArgs = {
    /**
     * Filter which categories to aggregate.
     * 
    **/
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categoriesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }


    
    
  export type CategoriesGroupByArgs = {
    where?: categoriesWhereInput
    orderBy?: Enumerable<categoriesOrderByInput>
    by: Array<CategoriesScalarFieldEnum>
    having?: categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }


  export type CategoriesGroupByOutputType = {
    categoryId: string
    _count: CategoriesCountAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends CategoriesGroupByArgs> = Promise<
    Array<
      PickArray<CategoriesGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]> 
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      > 
    >


  export type categoriesSelect = {
    categoryId?: boolean
    movies?: boolean | moviesFindManyArgs
  }

  export type categoriesInclude = {
    movies?: boolean | moviesFindManyArgs
  }

  export type categoriesGetPayload<
    S extends boolean | null | undefined | categoriesArgs,
    U = keyof S
      > = S extends true
        ? categories
    : S extends undefined
    ? never
    : S extends categoriesArgs | categoriesFindManyArgs
    ?'include' extends U
    ? categories  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'movies'
        ? Array < moviesGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof categories ?categories [P]
  : 
          P extends 'movies'
        ? Array < moviesGetPayload<S['select'][P]>>  : never
  } 
    : categories
  : categories


  type categoriesCountArgs = Merge<
    Omit<categoriesFindManyArgs, 'select' | 'include'> & {
      select?: CategoriesCountAggregateInputType | true
    }
  >

  export interface categoriesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Categories that matches the filter.
     * @param {categoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, categoriesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'categories'> extends True ? CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>> : CheckSelect<T, Prisma__categoriesClient<categories | null >, Prisma__categoriesClient<categoriesGetPayload<T> | null >>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, categoriesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'categories'> extends True ? CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>> : CheckSelect<T, Prisma__categoriesClient<categories | null >, Prisma__categoriesClient<categoriesGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `categoryId`
     * const categoriesWithCategoryIdOnly = await prisma.categories.findMany({ select: { categoryId: true } })
     * 
    **/
    findMany<T extends categoriesFindManyArgs>(
      args?: SelectSubset<T, categoriesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<categories>>, PrismaPromise<Array<categoriesGetPayload<T>>>>

    /**
     * Create a Categories.
     * @param {categoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
    **/
    create<T extends categoriesCreateArgs>(
      args: SelectSubset<T, categoriesCreateArgs>
    ): CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {categoriesCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categories = await prisma.categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriesCreateManyArgs>(
      args?: SelectSubset<T, categoriesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {categoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
    **/
    delete<T extends categoriesDeleteArgs>(
      args: SelectSubset<T, categoriesDeleteArgs>
    ): CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>>

    /**
     * Update one Categories.
     * @param {categoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriesUpdateArgs>(
      args: SelectSubset<T, categoriesUpdateArgs>
    ): CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {categoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriesDeleteManyArgs>(
      args?: SelectSubset<T, categoriesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriesUpdateManyArgs>(
      args: SelectSubset<T, categoriesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {categoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
    **/
    upsert<T extends categoriesUpsertArgs>(
      args: SelectSubset<T, categoriesUpsertArgs>
    ): CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoriesCountArgs>(
      args?: Subset<T, categoriesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriesGroupByArgs['orderBy'] }
        : { orderBy?: CategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoriesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    movies<T extends moviesFindManyArgs = {}>(args?: Subset<T, moviesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<movies>>, PrismaPromise<Array<moviesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * categories findUnique
   */
  export type categoriesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * Throw an Error if a categories can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which categories to fetch.
     * 
    **/
    where: categoriesWhereUniqueInput
  }


  /**
   * categories findFirst
   */
  export type categoriesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * Throw an Error if a categories can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which categories to fetch.
     * 
    **/
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categoriesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     * 
    **/
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     * 
    **/
    distinct?: Enumerable<CategoriesScalarFieldEnum>
  }


  /**
   * categories findMany
   */
  export type categoriesFindManyArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * Filter, which categories to fetch.
     * 
    **/
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categoriesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     * 
    **/
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoriesScalarFieldEnum>
  }


  /**
   * categories create
   */
  export type categoriesCreateArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * The data needed to create a categories.
     * 
    **/
    data: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
  }


  /**
   * categories createMany
   */
  export type categoriesCreateManyArgs = {
    data: Enumerable<categoriesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * categories update
   */
  export type categoriesUpdateArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * The data needed to update a categories.
     * 
    **/
    data: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
    /**
     * Choose, which categories to update.
     * 
    **/
    where: categoriesWhereUniqueInput
  }


  /**
   * categories updateMany
   */
  export type categoriesUpdateManyArgs = {
    data: XOR<categoriesUpdateManyMutationInput, categoriesUncheckedUpdateManyInput>
    where?: categoriesWhereInput
  }


  /**
   * categories upsert
   */
  export type categoriesUpsertArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * The filter to search for the categories to update in case it exists.
     * 
    **/
    where: categoriesWhereUniqueInput
    /**
     * In case the categories found by the `where` argument doesn't exist, create a new categories with this data.
     * 
    **/
    create: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
    /**
     * In case the categories was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
  }


  /**
   * categories delete
   */
  export type categoriesDeleteArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * Filter which categories to delete.
     * 
    **/
    where: categoriesWhereUniqueInput
  }


  /**
   * categories deleteMany
   */
  export type categoriesDeleteManyArgs = {
    where?: categoriesWhereInput
  }


  /**
   * categories without action
   */
  export type categoriesArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
  }



  /**
   * Model favorites
   */


  export type AggregateFavorites = {
    _count: FavoritesCountAggregateOutputType | null
    count: FavoritesCountAggregateOutputType | null
    _avg: FavoritesAvgAggregateOutputType | null
    avg: FavoritesAvgAggregateOutputType | null
    _sum: FavoritesSumAggregateOutputType | null
    sum: FavoritesSumAggregateOutputType | null
    _min: FavoritesMinAggregateOutputType | null
    min: FavoritesMinAggregateOutputType | null
    _max: FavoritesMaxAggregateOutputType | null
    max: FavoritesMaxAggregateOutputType | null
  }

  export type FavoritesAvgAggregateOutputType = {
    favoritesId: number | null
  }

  export type FavoritesSumAggregateOutputType = {
    favoritesId: number | null
  }

  export type FavoritesMinAggregateOutputType = {
    favoritesId: number | null
    userId: string | null
    movieId: string | null
  }

  export type FavoritesMaxAggregateOutputType = {
    favoritesId: number | null
    userId: string | null
    movieId: string | null
  }

  export type FavoritesCountAggregateOutputType = {
    favoritesId: number
    userId: number
    movieId: number
    _all: number
  }


  export type FavoritesAvgAggregateInputType = {
    favoritesId?: true
  }

  export type FavoritesSumAggregateInputType = {
    favoritesId?: true
  }

  export type FavoritesMinAggregateInputType = {
    favoritesId?: true
    userId?: true
    movieId?: true
  }

  export type FavoritesMaxAggregateInputType = {
    favoritesId?: true
    userId?: true
    movieId?: true
  }

  export type FavoritesCountAggregateInputType = {
    favoritesId?: true
    userId?: true
    movieId?: true
    _all?: true
  }

  export type FavoritesAggregateArgs = {
    /**
     * Filter which favorites to aggregate.
     * 
    **/
    where?: favoritesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favorites to fetch.
     * 
    **/
    orderBy?: Enumerable<favoritesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: favoritesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favorites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favorites.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned favorites
    **/
    _count?: true | FavoritesCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | FavoritesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavoritesAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: FavoritesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavoritesSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: FavoritesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoritesMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: FavoritesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoritesMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: FavoritesMaxAggregateInputType
  }

  export type GetFavoritesAggregateType<T extends FavoritesAggregateArgs> = {
        [P in keyof T & keyof AggregateFavorites]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavorites[P]>
      : GetScalarType<T[P], AggregateFavorites[P]>
  }


    
    
  export type FavoritesGroupByArgs = {
    where?: favoritesWhereInput
    orderBy?: Enumerable<favoritesOrderByInput>
    by: Array<FavoritesScalarFieldEnum>
    having?: favoritesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoritesCountAggregateInputType | true
    _avg?: FavoritesAvgAggregateInputType
    _sum?: FavoritesSumAggregateInputType
    _min?: FavoritesMinAggregateInputType
    _max?: FavoritesMaxAggregateInputType
  }


  export type FavoritesGroupByOutputType = {
    favoritesId: number
    userId: string
    movieId: string
    _count: FavoritesCountAggregateOutputType | null
    _avg: FavoritesAvgAggregateOutputType | null
    _sum: FavoritesSumAggregateOutputType | null
    _min: FavoritesMinAggregateOutputType | null
    _max: FavoritesMaxAggregateOutputType | null
  }

  type GetFavoritesGroupByPayload<T extends FavoritesGroupByArgs> = Promise<
    Array<
      PickArray<FavoritesGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof FavoritesGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], FavoritesGroupByOutputType[P]> 
            : GetScalarType<T[P], FavoritesGroupByOutputType[P]>
        }
      > 
    >


  export type favoritesSelect = {
    favoritesId?: boolean
    userId?: boolean
    movieId?: boolean
    movies?: boolean | moviesArgs
    userdata?: boolean | userdataArgs
  }

  export type favoritesInclude = {
    movies?: boolean | moviesArgs
    userdata?: boolean | userdataArgs
  }

  export type favoritesGetPayload<
    S extends boolean | null | undefined | favoritesArgs,
    U = keyof S
      > = S extends true
        ? favorites
    : S extends undefined
    ? never
    : S extends favoritesArgs | favoritesFindManyArgs
    ?'include' extends U
    ? favorites  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'movies'
        ? moviesGetPayload<S['include'][P]> :
        P extends 'userdata'
        ? userdataGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof favorites ?favorites [P]
  : 
          P extends 'movies'
        ? moviesGetPayload<S['select'][P]> :
        P extends 'userdata'
        ? userdataGetPayload<S['select'][P]> : never
  } 
    : favorites
  : favorites


  type favoritesCountArgs = Merge<
    Omit<favoritesFindManyArgs, 'select' | 'include'> & {
      select?: FavoritesCountAggregateInputType | true
    }
  >

  export interface favoritesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Favorites that matches the filter.
     * @param {favoritesFindUniqueArgs} args - Arguments to find a Favorites
     * @example
     * // Get one Favorites
     * const favorites = await prisma.favorites.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends favoritesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, favoritesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'favorites'> extends True ? CheckSelect<T, Prisma__favoritesClient<favorites>, Prisma__favoritesClient<favoritesGetPayload<T>>> : CheckSelect<T, Prisma__favoritesClient<favorites | null >, Prisma__favoritesClient<favoritesGetPayload<T> | null >>

    /**
     * Find the first Favorites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoritesFindFirstArgs} args - Arguments to find a Favorites
     * @example
     * // Get one Favorites
     * const favorites = await prisma.favorites.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends favoritesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, favoritesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'favorites'> extends True ? CheckSelect<T, Prisma__favoritesClient<favorites>, Prisma__favoritesClient<favoritesGetPayload<T>>> : CheckSelect<T, Prisma__favoritesClient<favorites | null >, Prisma__favoritesClient<favoritesGetPayload<T> | null >>

    /**
     * Find zero or more Favorites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoritesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favorites
     * const favorites = await prisma.favorites.findMany()
     * 
     * // Get first 10 Favorites
     * const favorites = await prisma.favorites.findMany({ take: 10 })
     * 
     * // Only select the `favoritesId`
     * const favoritesWithFavoritesIdOnly = await prisma.favorites.findMany({ select: { favoritesId: true } })
     * 
    **/
    findMany<T extends favoritesFindManyArgs>(
      args?: SelectSubset<T, favoritesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<favorites>>, PrismaPromise<Array<favoritesGetPayload<T>>>>

    /**
     * Create a Favorites.
     * @param {favoritesCreateArgs} args - Arguments to create a Favorites.
     * @example
     * // Create one Favorites
     * const Favorites = await prisma.favorites.create({
     *   data: {
     *     // ... data to create a Favorites
     *   }
     * })
     * 
    **/
    create<T extends favoritesCreateArgs>(
      args: SelectSubset<T, favoritesCreateArgs>
    ): CheckSelect<T, Prisma__favoritesClient<favorites>, Prisma__favoritesClient<favoritesGetPayload<T>>>

    /**
     * Create many Favorites.
     *     @param {favoritesCreateManyArgs} args - Arguments to create many Favorites.
     *     @example
     *     // Create many Favorites
     *     const favorites = await prisma.favorites.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends favoritesCreateManyArgs>(
      args?: SelectSubset<T, favoritesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Favorites.
     * @param {favoritesDeleteArgs} args - Arguments to delete one Favorites.
     * @example
     * // Delete one Favorites
     * const Favorites = await prisma.favorites.delete({
     *   where: {
     *     // ... filter to delete one Favorites
     *   }
     * })
     * 
    **/
    delete<T extends favoritesDeleteArgs>(
      args: SelectSubset<T, favoritesDeleteArgs>
    ): CheckSelect<T, Prisma__favoritesClient<favorites>, Prisma__favoritesClient<favoritesGetPayload<T>>>

    /**
     * Update one Favorites.
     * @param {favoritesUpdateArgs} args - Arguments to update one Favorites.
     * @example
     * // Update one Favorites
     * const favorites = await prisma.favorites.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends favoritesUpdateArgs>(
      args: SelectSubset<T, favoritesUpdateArgs>
    ): CheckSelect<T, Prisma__favoritesClient<favorites>, Prisma__favoritesClient<favoritesGetPayload<T>>>

    /**
     * Delete zero or more Favorites.
     * @param {favoritesDeleteManyArgs} args - Arguments to filter Favorites to delete.
     * @example
     * // Delete a few Favorites
     * const { count } = await prisma.favorites.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends favoritesDeleteManyArgs>(
      args?: SelectSubset<T, favoritesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoritesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favorites
     * const favorites = await prisma.favorites.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends favoritesUpdateManyArgs>(
      args: SelectSubset<T, favoritesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Favorites.
     * @param {favoritesUpsertArgs} args - Arguments to update or create a Favorites.
     * @example
     * // Update or create a Favorites
     * const favorites = await prisma.favorites.upsert({
     *   create: {
     *     // ... data to create a Favorites
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favorites we want to update
     *   }
     * })
    **/
    upsert<T extends favoritesUpsertArgs>(
      args: SelectSubset<T, favoritesUpsertArgs>
    ): CheckSelect<T, Prisma__favoritesClient<favorites>, Prisma__favoritesClient<favoritesGetPayload<T>>>

    /**
     * Count the number of Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoritesCountArgs} args - Arguments to filter Favorites to count.
     * @example
     * // Count the number of Favorites
     * const count = await prisma.favorites.count({
     *   where: {
     *     // ... the filter for the Favorites we want to count
     *   }
     * })
    **/
    count<T extends favoritesCountArgs>(
      args?: Subset<T, favoritesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoritesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoritesAggregateArgs>(args: Subset<T, FavoritesAggregateArgs>): PrismaPromise<GetFavoritesAggregateType<T>>

    /**
     * Group by Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoritesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoritesGroupByArgs['orderBy'] }
        : { orderBy?: FavoritesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoritesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoritesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for favorites.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__favoritesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    movies<T extends moviesArgs = {}>(args?: Subset<T, moviesArgs>): CheckSelect<T, Prisma__moviesClient<movies | null >, Prisma__moviesClient<moviesGetPayload<T> | null >>;

    userdata<T extends userdataArgs = {}>(args?: Subset<T, userdataArgs>): CheckSelect<T, Prisma__userdataClient<userdata | null >, Prisma__userdataClient<userdataGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * favorites findUnique
   */
  export type favoritesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the favorites
     * 
    **/
    select?: favoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesInclude | null
    /**
     * Throw an Error if a favorites can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which favorites to fetch.
     * 
    **/
    where: favoritesWhereUniqueInput
  }


  /**
   * favorites findFirst
   */
  export type favoritesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the favorites
     * 
    **/
    select?: favoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesInclude | null
    /**
     * Throw an Error if a favorites can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which favorites to fetch.
     * 
    **/
    where?: favoritesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favorites to fetch.
     * 
    **/
    orderBy?: Enumerable<favoritesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for favorites.
     * 
    **/
    cursor?: favoritesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favorites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favorites.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of favorites.
     * 
    **/
    distinct?: Enumerable<FavoritesScalarFieldEnum>
  }


  /**
   * favorites findMany
   */
  export type favoritesFindManyArgs = {
    /**
     * Select specific fields to fetch from the favorites
     * 
    **/
    select?: favoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesInclude | null
    /**
     * Filter, which favorites to fetch.
     * 
    **/
    where?: favoritesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favorites to fetch.
     * 
    **/
    orderBy?: Enumerable<favoritesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing favorites.
     * 
    **/
    cursor?: favoritesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favorites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favorites.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FavoritesScalarFieldEnum>
  }


  /**
   * favorites create
   */
  export type favoritesCreateArgs = {
    /**
     * Select specific fields to fetch from the favorites
     * 
    **/
    select?: favoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesInclude | null
    /**
     * The data needed to create a favorites.
     * 
    **/
    data: XOR<favoritesCreateInput, favoritesUncheckedCreateInput>
  }


  /**
   * favorites createMany
   */
  export type favoritesCreateManyArgs = {
    data: Enumerable<favoritesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * favorites update
   */
  export type favoritesUpdateArgs = {
    /**
     * Select specific fields to fetch from the favorites
     * 
    **/
    select?: favoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesInclude | null
    /**
     * The data needed to update a favorites.
     * 
    **/
    data: XOR<favoritesUpdateInput, favoritesUncheckedUpdateInput>
    /**
     * Choose, which favorites to update.
     * 
    **/
    where: favoritesWhereUniqueInput
  }


  /**
   * favorites updateMany
   */
  export type favoritesUpdateManyArgs = {
    data: XOR<favoritesUpdateManyMutationInput, favoritesUncheckedUpdateManyInput>
    where?: favoritesWhereInput
  }


  /**
   * favorites upsert
   */
  export type favoritesUpsertArgs = {
    /**
     * Select specific fields to fetch from the favorites
     * 
    **/
    select?: favoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesInclude | null
    /**
     * The filter to search for the favorites to update in case it exists.
     * 
    **/
    where: favoritesWhereUniqueInput
    /**
     * In case the favorites found by the `where` argument doesn't exist, create a new favorites with this data.
     * 
    **/
    create: XOR<favoritesCreateInput, favoritesUncheckedCreateInput>
    /**
     * In case the favorites was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<favoritesUpdateInput, favoritesUncheckedUpdateInput>
  }


  /**
   * favorites delete
   */
  export type favoritesDeleteArgs = {
    /**
     * Select specific fields to fetch from the favorites
     * 
    **/
    select?: favoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesInclude | null
    /**
     * Filter which favorites to delete.
     * 
    **/
    where: favoritesWhereUniqueInput
  }


  /**
   * favorites deleteMany
   */
  export type favoritesDeleteManyArgs = {
    where?: favoritesWhereInput
  }


  /**
   * favorites without action
   */
  export type favoritesArgs = {
    /**
     * Select specific fields to fetch from the favorites
     * 
    **/
    select?: favoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesInclude | null
  }



  /**
   * Model movies
   */


  export type AggregateMovies = {
    _count: MoviesCountAggregateOutputType | null
    count: MoviesCountAggregateOutputType | null
    _avg: MoviesAvgAggregateOutputType | null
    avg: MoviesAvgAggregateOutputType | null
    _sum: MoviesSumAggregateOutputType | null
    sum: MoviesSumAggregateOutputType | null
    _min: MoviesMinAggregateOutputType | null
    min: MoviesMinAggregateOutputType | null
    _max: MoviesMaxAggregateOutputType | null
    max: MoviesMaxAggregateOutputType | null
  }

  export type MoviesAvgAggregateOutputType = {
    movieLength: number | null
  }

  export type MoviesSumAggregateOutputType = {
    movieLength: number | null
  }

  export type MoviesMinAggregateOutputType = {
    movieId: string | null
    name: string | null
    category: string | null
    releaseDate: Date | null
    movieLength: number | null
    description: string | null
  }

  export type MoviesMaxAggregateOutputType = {
    movieId: string | null
    name: string | null
    category: string | null
    releaseDate: Date | null
    movieLength: number | null
    description: string | null
  }

  export type MoviesCountAggregateOutputType = {
    movieId: number
    name: number
    category: number
    releaseDate: number
    movieLength: number
    description: number
    _all: number
  }


  export type MoviesAvgAggregateInputType = {
    movieLength?: true
  }

  export type MoviesSumAggregateInputType = {
    movieLength?: true
  }

  export type MoviesMinAggregateInputType = {
    movieId?: true
    name?: true
    category?: true
    releaseDate?: true
    movieLength?: true
    description?: true
  }

  export type MoviesMaxAggregateInputType = {
    movieId?: true
    name?: true
    category?: true
    releaseDate?: true
    movieLength?: true
    description?: true
  }

  export type MoviesCountAggregateInputType = {
    movieId?: true
    name?: true
    category?: true
    releaseDate?: true
    movieLength?: true
    description?: true
    _all?: true
  }

  export type MoviesAggregateArgs = {
    /**
     * Filter which movies to aggregate.
     * 
    **/
    where?: moviesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of movies to fetch.
     * 
    **/
    orderBy?: Enumerable<moviesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: moviesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` movies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` movies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned movies
    **/
    _count?: true | MoviesCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | MoviesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MoviesAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: MoviesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MoviesSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: MoviesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MoviesMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: MoviesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MoviesMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: MoviesMaxAggregateInputType
  }

  export type GetMoviesAggregateType<T extends MoviesAggregateArgs> = {
        [P in keyof T & keyof AggregateMovies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovies[P]>
      : GetScalarType<T[P], AggregateMovies[P]>
  }


    
    
  export type MoviesGroupByArgs = {
    where?: moviesWhereInput
    orderBy?: Enumerable<moviesOrderByInput>
    by: Array<MoviesScalarFieldEnum>
    having?: moviesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MoviesCountAggregateInputType | true
    _avg?: MoviesAvgAggregateInputType
    _sum?: MoviesSumAggregateInputType
    _min?: MoviesMinAggregateInputType
    _max?: MoviesMaxAggregateInputType
  }


  export type MoviesGroupByOutputType = {
    movieId: string
    name: string
    category: string
    releaseDate: Date | null
    movieLength: number
    description: string
    _count: MoviesCountAggregateOutputType | null
    _avg: MoviesAvgAggregateOutputType | null
    _sum: MoviesSumAggregateOutputType | null
    _min: MoviesMinAggregateOutputType | null
    _max: MoviesMaxAggregateOutputType | null
  }

  type GetMoviesGroupByPayload<T extends MoviesGroupByArgs> = Promise<
    Array<
      PickArray<MoviesGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof MoviesGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], MoviesGroupByOutputType[P]> 
            : GetScalarType<T[P], MoviesGroupByOutputType[P]>
        }
      > 
    >


  export type moviesSelect = {
    movieId?: boolean
    name?: boolean
    category?: boolean
    releaseDate?: boolean
    movieLength?: boolean
    description?: boolean
    categories?: boolean | categoriesArgs
    favorites?: boolean | favoritesFindManyArgs
  }

  export type moviesInclude = {
    categories?: boolean | categoriesArgs
    favorites?: boolean | favoritesFindManyArgs
  }

  export type moviesGetPayload<
    S extends boolean | null | undefined | moviesArgs,
    U = keyof S
      > = S extends true
        ? movies
    : S extends undefined
    ? never
    : S extends moviesArgs | moviesFindManyArgs
    ?'include' extends U
    ? movies  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'categories'
        ? categoriesGetPayload<S['include'][P]> :
        P extends 'favorites'
        ? Array < favoritesGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof movies ?movies [P]
  : 
          P extends 'categories'
        ? categoriesGetPayload<S['select'][P]> :
        P extends 'favorites'
        ? Array < favoritesGetPayload<S['select'][P]>>  : never
  } 
    : movies
  : movies


  type moviesCountArgs = Merge<
    Omit<moviesFindManyArgs, 'select' | 'include'> & {
      select?: MoviesCountAggregateInputType | true
    }
  >

  export interface moviesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Movies that matches the filter.
     * @param {moviesFindUniqueArgs} args - Arguments to find a Movies
     * @example
     * // Get one Movies
     * const movies = await prisma.movies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends moviesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, moviesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'movies'> extends True ? CheckSelect<T, Prisma__moviesClient<movies>, Prisma__moviesClient<moviesGetPayload<T>>> : CheckSelect<T, Prisma__moviesClient<movies | null >, Prisma__moviesClient<moviesGetPayload<T> | null >>

    /**
     * Find the first Movies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moviesFindFirstArgs} args - Arguments to find a Movies
     * @example
     * // Get one Movies
     * const movies = await prisma.movies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends moviesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, moviesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'movies'> extends True ? CheckSelect<T, Prisma__moviesClient<movies>, Prisma__moviesClient<moviesGetPayload<T>>> : CheckSelect<T, Prisma__moviesClient<movies | null >, Prisma__moviesClient<moviesGetPayload<T> | null >>

    /**
     * Find zero or more Movies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moviesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Movies
     * const movies = await prisma.movies.findMany()
     * 
     * // Get first 10 Movies
     * const movies = await prisma.movies.findMany({ take: 10 })
     * 
     * // Only select the `movieId`
     * const moviesWithMovieIdOnly = await prisma.movies.findMany({ select: { movieId: true } })
     * 
    **/
    findMany<T extends moviesFindManyArgs>(
      args?: SelectSubset<T, moviesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<movies>>, PrismaPromise<Array<moviesGetPayload<T>>>>

    /**
     * Create a Movies.
     * @param {moviesCreateArgs} args - Arguments to create a Movies.
     * @example
     * // Create one Movies
     * const Movies = await prisma.movies.create({
     *   data: {
     *     // ... data to create a Movies
     *   }
     * })
     * 
    **/
    create<T extends moviesCreateArgs>(
      args: SelectSubset<T, moviesCreateArgs>
    ): CheckSelect<T, Prisma__moviesClient<movies>, Prisma__moviesClient<moviesGetPayload<T>>>

    /**
     * Create many Movies.
     *     @param {moviesCreateManyArgs} args - Arguments to create many Movies.
     *     @example
     *     // Create many Movies
     *     const movies = await prisma.movies.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends moviesCreateManyArgs>(
      args?: SelectSubset<T, moviesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Movies.
     * @param {moviesDeleteArgs} args - Arguments to delete one Movies.
     * @example
     * // Delete one Movies
     * const Movies = await prisma.movies.delete({
     *   where: {
     *     // ... filter to delete one Movies
     *   }
     * })
     * 
    **/
    delete<T extends moviesDeleteArgs>(
      args: SelectSubset<T, moviesDeleteArgs>
    ): CheckSelect<T, Prisma__moviesClient<movies>, Prisma__moviesClient<moviesGetPayload<T>>>

    /**
     * Update one Movies.
     * @param {moviesUpdateArgs} args - Arguments to update one Movies.
     * @example
     * // Update one Movies
     * const movies = await prisma.movies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends moviesUpdateArgs>(
      args: SelectSubset<T, moviesUpdateArgs>
    ): CheckSelect<T, Prisma__moviesClient<movies>, Prisma__moviesClient<moviesGetPayload<T>>>

    /**
     * Delete zero or more Movies.
     * @param {moviesDeleteManyArgs} args - Arguments to filter Movies to delete.
     * @example
     * // Delete a few Movies
     * const { count } = await prisma.movies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends moviesDeleteManyArgs>(
      args?: SelectSubset<T, moviesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moviesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Movies
     * const movies = await prisma.movies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends moviesUpdateManyArgs>(
      args: SelectSubset<T, moviesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Movies.
     * @param {moviesUpsertArgs} args - Arguments to update or create a Movies.
     * @example
     * // Update or create a Movies
     * const movies = await prisma.movies.upsert({
     *   create: {
     *     // ... data to create a Movies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Movies we want to update
     *   }
     * })
    **/
    upsert<T extends moviesUpsertArgs>(
      args: SelectSubset<T, moviesUpsertArgs>
    ): CheckSelect<T, Prisma__moviesClient<movies>, Prisma__moviesClient<moviesGetPayload<T>>>

    /**
     * Count the number of Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moviesCountArgs} args - Arguments to filter Movies to count.
     * @example
     * // Count the number of Movies
     * const count = await prisma.movies.count({
     *   where: {
     *     // ... the filter for the Movies we want to count
     *   }
     * })
    **/
    count<T extends moviesCountArgs>(
      args?: Subset<T, moviesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MoviesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MoviesAggregateArgs>(args: Subset<T, MoviesAggregateArgs>): PrismaPromise<GetMoviesAggregateType<T>>

    /**
     * Group by Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MoviesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MoviesGroupByArgs['orderBy'] }
        : { orderBy?: MoviesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MoviesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMoviesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for movies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__moviesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    categories<T extends categoriesArgs = {}>(args?: Subset<T, categoriesArgs>): CheckSelect<T, Prisma__categoriesClient<categories | null >, Prisma__categoriesClient<categoriesGetPayload<T> | null >>;

    favorites<T extends favoritesFindManyArgs = {}>(args?: Subset<T, favoritesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<favorites>>, PrismaPromise<Array<favoritesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * movies findUnique
   */
  export type moviesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the movies
     * 
    **/
    select?: moviesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: moviesInclude | null
    /**
     * Throw an Error if a movies can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which movies to fetch.
     * 
    **/
    where: moviesWhereUniqueInput
  }


  /**
   * movies findFirst
   */
  export type moviesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the movies
     * 
    **/
    select?: moviesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: moviesInclude | null
    /**
     * Throw an Error if a movies can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which movies to fetch.
     * 
    **/
    where?: moviesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of movies to fetch.
     * 
    **/
    orderBy?: Enumerable<moviesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for movies.
     * 
    **/
    cursor?: moviesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` movies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` movies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of movies.
     * 
    **/
    distinct?: Enumerable<MoviesScalarFieldEnum>
  }


  /**
   * movies findMany
   */
  export type moviesFindManyArgs = {
    /**
     * Select specific fields to fetch from the movies
     * 
    **/
    select?: moviesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: moviesInclude | null
    /**
     * Filter, which movies to fetch.
     * 
    **/
    where?: moviesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of movies to fetch.
     * 
    **/
    orderBy?: Enumerable<moviesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing movies.
     * 
    **/
    cursor?: moviesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` movies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` movies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MoviesScalarFieldEnum>
  }


  /**
   * movies create
   */
  export type moviesCreateArgs = {
    /**
     * Select specific fields to fetch from the movies
     * 
    **/
    select?: moviesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: moviesInclude | null
    /**
     * The data needed to create a movies.
     * 
    **/
    data: XOR<moviesCreateInput, moviesUncheckedCreateInput>
  }


  /**
   * movies createMany
   */
  export type moviesCreateManyArgs = {
    data: Enumerable<moviesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * movies update
   */
  export type moviesUpdateArgs = {
    /**
     * Select specific fields to fetch from the movies
     * 
    **/
    select?: moviesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: moviesInclude | null
    /**
     * The data needed to update a movies.
     * 
    **/
    data: XOR<moviesUpdateInput, moviesUncheckedUpdateInput>
    /**
     * Choose, which movies to update.
     * 
    **/
    where: moviesWhereUniqueInput
  }


  /**
   * movies updateMany
   */
  export type moviesUpdateManyArgs = {
    data: XOR<moviesUpdateManyMutationInput, moviesUncheckedUpdateManyInput>
    where?: moviesWhereInput
  }


  /**
   * movies upsert
   */
  export type moviesUpsertArgs = {
    /**
     * Select specific fields to fetch from the movies
     * 
    **/
    select?: moviesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: moviesInclude | null
    /**
     * The filter to search for the movies to update in case it exists.
     * 
    **/
    where: moviesWhereUniqueInput
    /**
     * In case the movies found by the `where` argument doesn't exist, create a new movies with this data.
     * 
    **/
    create: XOR<moviesCreateInput, moviesUncheckedCreateInput>
    /**
     * In case the movies was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<moviesUpdateInput, moviesUncheckedUpdateInput>
  }


  /**
   * movies delete
   */
  export type moviesDeleteArgs = {
    /**
     * Select specific fields to fetch from the movies
     * 
    **/
    select?: moviesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: moviesInclude | null
    /**
     * Filter which movies to delete.
     * 
    **/
    where: moviesWhereUniqueInput
  }


  /**
   * movies deleteMany
   */
  export type moviesDeleteManyArgs = {
    where?: moviesWhereInput
  }


  /**
   * movies without action
   */
  export type moviesArgs = {
    /**
     * Select specific fields to fetch from the movies
     * 
    **/
    select?: moviesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: moviesInclude | null
  }



  /**
   * Model userdata
   */


  export type AggregateUserdata = {
    _count: UserdataCountAggregateOutputType | null
    count: UserdataCountAggregateOutputType | null
    _min: UserdataMinAggregateOutputType | null
    min: UserdataMinAggregateOutputType | null
    _max: UserdataMaxAggregateOutputType | null
    max: UserdataMaxAggregateOutputType | null
  }

  export type UserdataMinAggregateOutputType = {
    userId: string | null
    createdAt: Date | null
    email: string | null
    name: string | null
    surname: string | null
    password: string | null
  }

  export type UserdataMaxAggregateOutputType = {
    userId: string | null
    createdAt: Date | null
    email: string | null
    name: string | null
    surname: string | null
    password: string | null
  }

  export type UserdataCountAggregateOutputType = {
    userId: number
    createdAt: number
    email: number
    name: number
    surname: number
    password: number
    _all: number
  }


  export type UserdataMinAggregateInputType = {
    userId?: true
    createdAt?: true
    email?: true
    name?: true
    surname?: true
    password?: true
  }

  export type UserdataMaxAggregateInputType = {
    userId?: true
    createdAt?: true
    email?: true
    name?: true
    surname?: true
    password?: true
  }

  export type UserdataCountAggregateInputType = {
    userId?: true
    createdAt?: true
    email?: true
    name?: true
    surname?: true
    password?: true
    _all?: true
  }

  export type UserdataAggregateArgs = {
    /**
     * Filter which userdata to aggregate.
     * 
    **/
    where?: userdataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userdata to fetch.
     * 
    **/
    orderBy?: Enumerable<userdataOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: userdataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userdata from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userdata.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userdata
    **/
    _count?: true | UserdataCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UserdataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserdataMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UserdataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserdataMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UserdataMaxAggregateInputType
  }

  export type GetUserdataAggregateType<T extends UserdataAggregateArgs> = {
        [P in keyof T & keyof AggregateUserdata]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserdata[P]>
      : GetScalarType<T[P], AggregateUserdata[P]>
  }


    
    
  export type UserdataGroupByArgs = {
    where?: userdataWhereInput
    orderBy?: Enumerable<userdataOrderByInput>
    by: Array<UserdataScalarFieldEnum>
    having?: userdataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserdataCountAggregateInputType | true
    _min?: UserdataMinAggregateInputType
    _max?: UserdataMaxAggregateInputType
  }


  export type UserdataGroupByOutputType = {
    userId: string
    createdAt: Date
    email: string
    name: string
    surname: string
    password: string
    _count: UserdataCountAggregateOutputType | null
    _min: UserdataMinAggregateOutputType | null
    _max: UserdataMaxAggregateOutputType | null
  }

  type GetUserdataGroupByPayload<T extends UserdataGroupByArgs> = Promise<
    Array<
      PickArray<UserdataGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserdataGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserdataGroupByOutputType[P]> 
            : GetScalarType<T[P], UserdataGroupByOutputType[P]>
        }
      > 
    >


  export type userdataSelect = {
    userId?: boolean
    createdAt?: boolean
    email?: boolean
    name?: boolean
    surname?: boolean
    password?: boolean
    favorites?: boolean | favoritesFindManyArgs
  }

  export type userdataInclude = {
    favorites?: boolean | favoritesFindManyArgs
  }

  export type userdataGetPayload<
    S extends boolean | null | undefined | userdataArgs,
    U = keyof S
      > = S extends true
        ? userdata
    : S extends undefined
    ? never
    : S extends userdataArgs | userdataFindManyArgs
    ?'include' extends U
    ? userdata  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'favorites'
        ? Array < favoritesGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof userdata ?userdata [P]
  : 
          P extends 'favorites'
        ? Array < favoritesGetPayload<S['select'][P]>>  : never
  } 
    : userdata
  : userdata


  type userdataCountArgs = Merge<
    Omit<userdataFindManyArgs, 'select' | 'include'> & {
      select?: UserdataCountAggregateInputType | true
    }
  >

  export interface userdataDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Userdata that matches the filter.
     * @param {userdataFindUniqueArgs} args - Arguments to find a Userdata
     * @example
     * // Get one Userdata
     * const userdata = await prisma.userdata.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userdataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userdataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'userdata'> extends True ? CheckSelect<T, Prisma__userdataClient<userdata>, Prisma__userdataClient<userdataGetPayload<T>>> : CheckSelect<T, Prisma__userdataClient<userdata | null >, Prisma__userdataClient<userdataGetPayload<T> | null >>

    /**
     * Find the first Userdata that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdataFindFirstArgs} args - Arguments to find a Userdata
     * @example
     * // Get one Userdata
     * const userdata = await prisma.userdata.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userdataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userdataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'userdata'> extends True ? CheckSelect<T, Prisma__userdataClient<userdata>, Prisma__userdataClient<userdataGetPayload<T>>> : CheckSelect<T, Prisma__userdataClient<userdata | null >, Prisma__userdataClient<userdataGetPayload<T> | null >>

    /**
     * Find zero or more Userdata that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Userdata
     * const userdata = await prisma.userdata.findMany()
     * 
     * // Get first 10 Userdata
     * const userdata = await prisma.userdata.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userdataWithUserIdOnly = await prisma.userdata.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends userdataFindManyArgs>(
      args?: SelectSubset<T, userdataFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<userdata>>, PrismaPromise<Array<userdataGetPayload<T>>>>

    /**
     * Create a Userdata.
     * @param {userdataCreateArgs} args - Arguments to create a Userdata.
     * @example
     * // Create one Userdata
     * const Userdata = await prisma.userdata.create({
     *   data: {
     *     // ... data to create a Userdata
     *   }
     * })
     * 
    **/
    create<T extends userdataCreateArgs>(
      args: SelectSubset<T, userdataCreateArgs>
    ): CheckSelect<T, Prisma__userdataClient<userdata>, Prisma__userdataClient<userdataGetPayload<T>>>

    /**
     * Create many Userdata.
     *     @param {userdataCreateManyArgs} args - Arguments to create many Userdata.
     *     @example
     *     // Create many Userdata
     *     const userdata = await prisma.userdata.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userdataCreateManyArgs>(
      args?: SelectSubset<T, userdataCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Userdata.
     * @param {userdataDeleteArgs} args - Arguments to delete one Userdata.
     * @example
     * // Delete one Userdata
     * const Userdata = await prisma.userdata.delete({
     *   where: {
     *     // ... filter to delete one Userdata
     *   }
     * })
     * 
    **/
    delete<T extends userdataDeleteArgs>(
      args: SelectSubset<T, userdataDeleteArgs>
    ): CheckSelect<T, Prisma__userdataClient<userdata>, Prisma__userdataClient<userdataGetPayload<T>>>

    /**
     * Update one Userdata.
     * @param {userdataUpdateArgs} args - Arguments to update one Userdata.
     * @example
     * // Update one Userdata
     * const userdata = await prisma.userdata.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userdataUpdateArgs>(
      args: SelectSubset<T, userdataUpdateArgs>
    ): CheckSelect<T, Prisma__userdataClient<userdata>, Prisma__userdataClient<userdataGetPayload<T>>>

    /**
     * Delete zero or more Userdata.
     * @param {userdataDeleteManyArgs} args - Arguments to filter Userdata to delete.
     * @example
     * // Delete a few Userdata
     * const { count } = await prisma.userdata.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userdataDeleteManyArgs>(
      args?: SelectSubset<T, userdataDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Userdata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Userdata
     * const userdata = await prisma.userdata.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userdataUpdateManyArgs>(
      args: SelectSubset<T, userdataUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Userdata.
     * @param {userdataUpsertArgs} args - Arguments to update or create a Userdata.
     * @example
     * // Update or create a Userdata
     * const userdata = await prisma.userdata.upsert({
     *   create: {
     *     // ... data to create a Userdata
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Userdata we want to update
     *   }
     * })
    **/
    upsert<T extends userdataUpsertArgs>(
      args: SelectSubset<T, userdataUpsertArgs>
    ): CheckSelect<T, Prisma__userdataClient<userdata>, Prisma__userdataClient<userdataGetPayload<T>>>

    /**
     * Count the number of Userdata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdataCountArgs} args - Arguments to filter Userdata to count.
     * @example
     * // Count the number of Userdata
     * const count = await prisma.userdata.count({
     *   where: {
     *     // ... the filter for the Userdata we want to count
     *   }
     * })
    **/
    count<T extends userdataCountArgs>(
      args?: Subset<T, userdataCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserdataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Userdata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserdataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserdataAggregateArgs>(args: Subset<T, UserdataAggregateArgs>): PrismaPromise<GetUserdataAggregateType<T>>

    /**
     * Group by Userdata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserdataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserdataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserdataGroupByArgs['orderBy'] }
        : { orderBy?: UserdataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserdataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserdataGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for userdata.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userdataClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    favorites<T extends favoritesFindManyArgs = {}>(args?: Subset<T, favoritesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<favorites>>, PrismaPromise<Array<favoritesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * userdata findUnique
   */
  export type userdataFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the userdata
     * 
    **/
    select?: userdataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userdataInclude | null
    /**
     * Throw an Error if a userdata can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which userdata to fetch.
     * 
    **/
    where: userdataWhereUniqueInput
  }


  /**
   * userdata findFirst
   */
  export type userdataFindFirstArgs = {
    /**
     * Select specific fields to fetch from the userdata
     * 
    **/
    select?: userdataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userdataInclude | null
    /**
     * Throw an Error if a userdata can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which userdata to fetch.
     * 
    **/
    where?: userdataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userdata to fetch.
     * 
    **/
    orderBy?: Enumerable<userdataOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userdata.
     * 
    **/
    cursor?: userdataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userdata from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userdata.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userdata.
     * 
    **/
    distinct?: Enumerable<UserdataScalarFieldEnum>
  }


  /**
   * userdata findMany
   */
  export type userdataFindManyArgs = {
    /**
     * Select specific fields to fetch from the userdata
     * 
    **/
    select?: userdataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userdataInclude | null
    /**
     * Filter, which userdata to fetch.
     * 
    **/
    where?: userdataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userdata to fetch.
     * 
    **/
    orderBy?: Enumerable<userdataOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userdata.
     * 
    **/
    cursor?: userdataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userdata from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userdata.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserdataScalarFieldEnum>
  }


  /**
   * userdata create
   */
  export type userdataCreateArgs = {
    /**
     * Select specific fields to fetch from the userdata
     * 
    **/
    select?: userdataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userdataInclude | null
    /**
     * The data needed to create a userdata.
     * 
    **/
    data: XOR<userdataCreateInput, userdataUncheckedCreateInput>
  }


  /**
   * userdata createMany
   */
  export type userdataCreateManyArgs = {
    data: Enumerable<userdataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * userdata update
   */
  export type userdataUpdateArgs = {
    /**
     * Select specific fields to fetch from the userdata
     * 
    **/
    select?: userdataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userdataInclude | null
    /**
     * The data needed to update a userdata.
     * 
    **/
    data: XOR<userdataUpdateInput, userdataUncheckedUpdateInput>
    /**
     * Choose, which userdata to update.
     * 
    **/
    where: userdataWhereUniqueInput
  }


  /**
   * userdata updateMany
   */
  export type userdataUpdateManyArgs = {
    data: XOR<userdataUpdateManyMutationInput, userdataUncheckedUpdateManyInput>
    where?: userdataWhereInput
  }


  /**
   * userdata upsert
   */
  export type userdataUpsertArgs = {
    /**
     * Select specific fields to fetch from the userdata
     * 
    **/
    select?: userdataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userdataInclude | null
    /**
     * The filter to search for the userdata to update in case it exists.
     * 
    **/
    where: userdataWhereUniqueInput
    /**
     * In case the userdata found by the `where` argument doesn't exist, create a new userdata with this data.
     * 
    **/
    create: XOR<userdataCreateInput, userdataUncheckedCreateInput>
    /**
     * In case the userdata was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<userdataUpdateInput, userdataUncheckedUpdateInput>
  }


  /**
   * userdata delete
   */
  export type userdataDeleteArgs = {
    /**
     * Select specific fields to fetch from the userdata
     * 
    **/
    select?: userdataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userdataInclude | null
    /**
     * Filter which userdata to delete.
     * 
    **/
    where: userdataWhereUniqueInput
  }


  /**
   * userdata deleteMany
   */
  export type userdataDeleteManyArgs = {
    where?: userdataWhereInput
  }


  /**
   * userdata without action
   */
  export type userdataArgs = {
    /**
     * Select specific fields to fetch from the userdata
     * 
    **/
    select?: userdataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userdataInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CategoriesScalarFieldEnum: {
    categoryId: 'categoryId'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const FavoritesScalarFieldEnum: {
    favoritesId: 'favoritesId',
    userId: 'userId',
    movieId: 'movieId'
  };

  export type FavoritesScalarFieldEnum = (typeof FavoritesScalarFieldEnum)[keyof typeof FavoritesScalarFieldEnum]


  export const MoviesScalarFieldEnum: {
    movieId: 'movieId',
    name: 'name',
    category: 'category',
    releaseDate: 'releaseDate',
    movieLength: 'movieLength',
    description: 'description'
  };

  export type MoviesScalarFieldEnum = (typeof MoviesScalarFieldEnum)[keyof typeof MoviesScalarFieldEnum]


  export const UserdataScalarFieldEnum: {
    userId: 'userId',
    createdAt: 'createdAt',
    email: 'email',
    name: 'name',
    surname: 'surname',
    password: 'password'
  };

  export type UserdataScalarFieldEnum = (typeof UserdataScalarFieldEnum)[keyof typeof UserdataScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type categoriesWhereInput = {
    AND?: Enumerable<categoriesWhereInput>
    OR?: Enumerable<categoriesWhereInput>
    NOT?: Enumerable<categoriesWhereInput>
    categoryId?: StringFilter | string
    movies?: MoviesListRelationFilter
  }

  export type categoriesOrderByInput = {
    categoryId?: SortOrder
  }

  export type categoriesWhereUniqueInput = {
    categoryId?: string
  }

  export type categoriesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<categoriesScalarWhereWithAggregatesInput>
    OR?: Enumerable<categoriesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<categoriesScalarWhereWithAggregatesInput>
    categoryId?: StringWithAggregatesFilter | string
  }

  export type favoritesWhereInput = {
    AND?: Enumerable<favoritesWhereInput>
    OR?: Enumerable<favoritesWhereInput>
    NOT?: Enumerable<favoritesWhereInput>
    favoritesId?: IntFilter | number
    userId?: StringFilter | string
    movieId?: StringFilter | string
    movies?: XOR<MoviesRelationFilter, moviesWhereInput>
    userdata?: XOR<UserdataRelationFilter, userdataWhereInput>
  }

  export type favoritesOrderByInput = {
    favoritesId?: SortOrder
    userId?: SortOrder
    movieId?: SortOrder
  }

  export type favoritesWhereUniqueInput = {
    favoritesId?: number
  }

  export type favoritesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<favoritesScalarWhereWithAggregatesInput>
    OR?: Enumerable<favoritesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<favoritesScalarWhereWithAggregatesInput>
    favoritesId?: IntWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
    movieId?: StringWithAggregatesFilter | string
  }

  export type moviesWhereInput = {
    AND?: Enumerable<moviesWhereInput>
    OR?: Enumerable<moviesWhereInput>
    NOT?: Enumerable<moviesWhereInput>
    movieId?: StringFilter | string
    name?: StringFilter | string
    category?: StringFilter | string
    releaseDate?: DateTimeNullableFilter | Date | string | null
    movieLength?: IntFilter | number
    description?: StringFilter | string
    categories?: XOR<CategoriesRelationFilter, categoriesWhereInput>
    favorites?: FavoritesListRelationFilter
  }

  export type moviesOrderByInput = {
    movieId?: SortOrder
    name?: SortOrder
    category?: SortOrder
    releaseDate?: SortOrder
    movieLength?: SortOrder
    description?: SortOrder
  }

  export type moviesWhereUniqueInput = {
    movieId?: string
    name?: string
  }

  export type moviesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<moviesScalarWhereWithAggregatesInput>
    OR?: Enumerable<moviesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<moviesScalarWhereWithAggregatesInput>
    movieId?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    category?: StringWithAggregatesFilter | string
    releaseDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    movieLength?: IntWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
  }

  export type userdataWhereInput = {
    AND?: Enumerable<userdataWhereInput>
    OR?: Enumerable<userdataWhereInput>
    NOT?: Enumerable<userdataWhereInput>
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    email?: StringFilter | string
    name?: StringFilter | string
    surname?: StringFilter | string
    password?: StringFilter | string
    favorites?: FavoritesListRelationFilter
  }

  export type userdataOrderByInput = {
    userId?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    password?: SortOrder
  }

  export type userdataWhereUniqueInput = {
    userId?: string
    email?: string
  }

  export type userdataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userdataScalarWhereWithAggregatesInput>
    OR?: Enumerable<userdataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userdataScalarWhereWithAggregatesInput>
    userId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    surname?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type categoriesCreateInput = {
    categoryId: string
    movies?: moviesCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUncheckedCreateInput = {
    categoryId: string
    movies?: moviesUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUpdateInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
    movies?: moviesUpdateManyWithoutCategoriesInput
  }

  export type categoriesUncheckedUpdateInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
    movies?: moviesUncheckedUpdateManyWithoutCategoriesInput
  }

  export type categoriesCreateManyInput = {
    categoryId: string
  }

  export type categoriesUpdateManyMutationInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesUncheckedUpdateManyInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type favoritesCreateInput = {
    movies: moviesCreateNestedOneWithoutFavoritesInput
    userdata: userdataCreateNestedOneWithoutFavoritesInput
  }

  export type favoritesUncheckedCreateInput = {
    favoritesId?: number
    userId: string
    movieId: string
  }

  export type favoritesUpdateInput = {
    movies?: moviesUpdateOneRequiredWithoutFavoritesInput
    userdata?: userdataUpdateOneRequiredWithoutFavoritesInput
  }

  export type favoritesUncheckedUpdateInput = {
    favoritesId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    movieId?: StringFieldUpdateOperationsInput | string
  }

  export type favoritesCreateManyInput = {
    favoritesId?: number
    userId: string
    movieId: string
  }

  export type favoritesUpdateManyMutationInput = {

  }

  export type favoritesUncheckedUpdateManyInput = {
    favoritesId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    movieId?: StringFieldUpdateOperationsInput | string
  }

  export type moviesCreateInput = {
    movieId: string
    name: string
    releaseDate?: Date | string | null
    movieLength: number
    description: string
    categories: categoriesCreateNestedOneWithoutMoviesInput
    favorites?: favoritesCreateNestedManyWithoutMoviesInput
  }

  export type moviesUncheckedCreateInput = {
    movieId: string
    name: string
    category: string
    releaseDate?: Date | string | null
    movieLength: number
    description: string
    favorites?: favoritesUncheckedCreateNestedManyWithoutMoviesInput
  }

  export type moviesUpdateInput = {
    movieId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    movieLength?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    categories?: categoriesUpdateOneRequiredWithoutMoviesInput
    favorites?: favoritesUpdateManyWithoutMoviesInput
  }

  export type moviesUncheckedUpdateInput = {
    movieId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    movieLength?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    favorites?: favoritesUncheckedUpdateManyWithoutMoviesInput
  }

  export type moviesCreateManyInput = {
    movieId: string
    name: string
    category: string
    releaseDate?: Date | string | null
    movieLength: number
    description: string
  }

  export type moviesUpdateManyMutationInput = {
    movieId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    movieLength?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type moviesUncheckedUpdateManyInput = {
    movieId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    movieLength?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type userdataCreateInput = {
    userId: string
    createdAt?: Date | string
    email: string
    name: string
    surname: string
    password: string
    favorites?: favoritesCreateNestedManyWithoutUserdataInput
  }

  export type userdataUncheckedCreateInput = {
    userId: string
    createdAt?: Date | string
    email: string
    name: string
    surname: string
    password: string
    favorites?: favoritesUncheckedCreateNestedManyWithoutUserdataInput
  }

  export type userdataUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    favorites?: favoritesUpdateManyWithoutUserdataInput
  }

  export type userdataUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    favorites?: favoritesUncheckedUpdateManyWithoutUserdataInput
  }

  export type userdataCreateManyInput = {
    userId: string
    createdAt?: Date | string
    email: string
    name: string
    surname: string
    password: string
  }

  export type userdataUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userdataUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type MoviesListRelationFilter = {
    every?: moviesWhereInput
    some?: moviesWhereInput
    none?: moviesWhereInput
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type MoviesRelationFilter = {
    is?: moviesWhereInput
    isNot?: moviesWhereInput
  }

  export type UserdataRelationFilter = {
    is?: userdataWhereInput
    isNot?: userdataWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type CategoriesRelationFilter = {
    is?: categoriesWhereInput
    isNot?: categoriesWhereInput
  }

  export type FavoritesListRelationFilter = {
    every?: favoritesWhereInput
    some?: favoritesWhereInput
    none?: favoritesWhereInput
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type moviesCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<moviesCreateWithoutCategoriesInput>, Enumerable<moviesUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<moviesCreateOrConnectWithoutCategoriesInput>
    createMany?: moviesCreateManyCategoriesInputEnvelope
    connect?: Enumerable<moviesWhereUniqueInput>
  }

  export type moviesUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<moviesCreateWithoutCategoriesInput>, Enumerable<moviesUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<moviesCreateOrConnectWithoutCategoriesInput>
    createMany?: moviesCreateManyCategoriesInputEnvelope
    connect?: Enumerable<moviesWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type moviesUpdateManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<moviesCreateWithoutCategoriesInput>, Enumerable<moviesUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<moviesCreateOrConnectWithoutCategoriesInput>
    upsert?: Enumerable<moviesUpsertWithWhereUniqueWithoutCategoriesInput>
    createMany?: moviesCreateManyCategoriesInputEnvelope
    connect?: Enumerable<moviesWhereUniqueInput>
    set?: Enumerable<moviesWhereUniqueInput>
    disconnect?: Enumerable<moviesWhereUniqueInput>
    delete?: Enumerable<moviesWhereUniqueInput>
    update?: Enumerable<moviesUpdateWithWhereUniqueWithoutCategoriesInput>
    updateMany?: Enumerable<moviesUpdateManyWithWhereWithoutCategoriesInput>
    deleteMany?: Enumerable<moviesScalarWhereInput>
  }

  export type moviesUncheckedUpdateManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<moviesCreateWithoutCategoriesInput>, Enumerable<moviesUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<moviesCreateOrConnectWithoutCategoriesInput>
    upsert?: Enumerable<moviesUpsertWithWhereUniqueWithoutCategoriesInput>
    createMany?: moviesCreateManyCategoriesInputEnvelope
    connect?: Enumerable<moviesWhereUniqueInput>
    set?: Enumerable<moviesWhereUniqueInput>
    disconnect?: Enumerable<moviesWhereUniqueInput>
    delete?: Enumerable<moviesWhereUniqueInput>
    update?: Enumerable<moviesUpdateWithWhereUniqueWithoutCategoriesInput>
    updateMany?: Enumerable<moviesUpdateManyWithWhereWithoutCategoriesInput>
    deleteMany?: Enumerable<moviesScalarWhereInput>
  }

  export type moviesCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<moviesCreateWithoutFavoritesInput, moviesUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: moviesCreateOrConnectWithoutFavoritesInput
    connect?: moviesWhereUniqueInput
  }

  export type userdataCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<userdataCreateWithoutFavoritesInput, userdataUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: userdataCreateOrConnectWithoutFavoritesInput
    connect?: userdataWhereUniqueInput
  }

  export type moviesUpdateOneRequiredWithoutFavoritesInput = {
    create?: XOR<moviesCreateWithoutFavoritesInput, moviesUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: moviesCreateOrConnectWithoutFavoritesInput
    upsert?: moviesUpsertWithoutFavoritesInput
    connect?: moviesWhereUniqueInput
    update?: XOR<moviesUpdateWithoutFavoritesInput, moviesUncheckedUpdateWithoutFavoritesInput>
  }

  export type userdataUpdateOneRequiredWithoutFavoritesInput = {
    create?: XOR<userdataCreateWithoutFavoritesInput, userdataUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: userdataCreateOrConnectWithoutFavoritesInput
    upsert?: userdataUpsertWithoutFavoritesInput
    connect?: userdataWhereUniqueInput
    update?: XOR<userdataUpdateWithoutFavoritesInput, userdataUncheckedUpdateWithoutFavoritesInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type categoriesCreateNestedOneWithoutMoviesInput = {
    create?: XOR<categoriesCreateWithoutMoviesInput, categoriesUncheckedCreateWithoutMoviesInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutMoviesInput
    connect?: categoriesWhereUniqueInput
  }

  export type favoritesCreateNestedManyWithoutMoviesInput = {
    create?: XOR<Enumerable<favoritesCreateWithoutMoviesInput>, Enumerable<favoritesUncheckedCreateWithoutMoviesInput>>
    connectOrCreate?: Enumerable<favoritesCreateOrConnectWithoutMoviesInput>
    createMany?: favoritesCreateManyMoviesInputEnvelope
    connect?: Enumerable<favoritesWhereUniqueInput>
  }

  export type favoritesUncheckedCreateNestedManyWithoutMoviesInput = {
    create?: XOR<Enumerable<favoritesCreateWithoutMoviesInput>, Enumerable<favoritesUncheckedCreateWithoutMoviesInput>>
    connectOrCreate?: Enumerable<favoritesCreateOrConnectWithoutMoviesInput>
    createMany?: favoritesCreateManyMoviesInputEnvelope
    connect?: Enumerable<favoritesWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type categoriesUpdateOneRequiredWithoutMoviesInput = {
    create?: XOR<categoriesCreateWithoutMoviesInput, categoriesUncheckedCreateWithoutMoviesInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutMoviesInput
    upsert?: categoriesUpsertWithoutMoviesInput
    connect?: categoriesWhereUniqueInput
    update?: XOR<categoriesUpdateWithoutMoviesInput, categoriesUncheckedUpdateWithoutMoviesInput>
  }

  export type favoritesUpdateManyWithoutMoviesInput = {
    create?: XOR<Enumerable<favoritesCreateWithoutMoviesInput>, Enumerable<favoritesUncheckedCreateWithoutMoviesInput>>
    connectOrCreate?: Enumerable<favoritesCreateOrConnectWithoutMoviesInput>
    upsert?: Enumerable<favoritesUpsertWithWhereUniqueWithoutMoviesInput>
    createMany?: favoritesCreateManyMoviesInputEnvelope
    connect?: Enumerable<favoritesWhereUniqueInput>
    set?: Enumerable<favoritesWhereUniqueInput>
    disconnect?: Enumerable<favoritesWhereUniqueInput>
    delete?: Enumerable<favoritesWhereUniqueInput>
    update?: Enumerable<favoritesUpdateWithWhereUniqueWithoutMoviesInput>
    updateMany?: Enumerable<favoritesUpdateManyWithWhereWithoutMoviesInput>
    deleteMany?: Enumerable<favoritesScalarWhereInput>
  }

  export type favoritesUncheckedUpdateManyWithoutMoviesInput = {
    create?: XOR<Enumerable<favoritesCreateWithoutMoviesInput>, Enumerable<favoritesUncheckedCreateWithoutMoviesInput>>
    connectOrCreate?: Enumerable<favoritesCreateOrConnectWithoutMoviesInput>
    upsert?: Enumerable<favoritesUpsertWithWhereUniqueWithoutMoviesInput>
    createMany?: favoritesCreateManyMoviesInputEnvelope
    connect?: Enumerable<favoritesWhereUniqueInput>
    set?: Enumerable<favoritesWhereUniqueInput>
    disconnect?: Enumerable<favoritesWhereUniqueInput>
    delete?: Enumerable<favoritesWhereUniqueInput>
    update?: Enumerable<favoritesUpdateWithWhereUniqueWithoutMoviesInput>
    updateMany?: Enumerable<favoritesUpdateManyWithWhereWithoutMoviesInput>
    deleteMany?: Enumerable<favoritesScalarWhereInput>
  }

  export type favoritesCreateNestedManyWithoutUserdataInput = {
    create?: XOR<Enumerable<favoritesCreateWithoutUserdataInput>, Enumerable<favoritesUncheckedCreateWithoutUserdataInput>>
    connectOrCreate?: Enumerable<favoritesCreateOrConnectWithoutUserdataInput>
    createMany?: favoritesCreateManyUserdataInputEnvelope
    connect?: Enumerable<favoritesWhereUniqueInput>
  }

  export type favoritesUncheckedCreateNestedManyWithoutUserdataInput = {
    create?: XOR<Enumerable<favoritesCreateWithoutUserdataInput>, Enumerable<favoritesUncheckedCreateWithoutUserdataInput>>
    connectOrCreate?: Enumerable<favoritesCreateOrConnectWithoutUserdataInput>
    createMany?: favoritesCreateManyUserdataInputEnvelope
    connect?: Enumerable<favoritesWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type favoritesUpdateManyWithoutUserdataInput = {
    create?: XOR<Enumerable<favoritesCreateWithoutUserdataInput>, Enumerable<favoritesUncheckedCreateWithoutUserdataInput>>
    connectOrCreate?: Enumerable<favoritesCreateOrConnectWithoutUserdataInput>
    upsert?: Enumerable<favoritesUpsertWithWhereUniqueWithoutUserdataInput>
    createMany?: favoritesCreateManyUserdataInputEnvelope
    connect?: Enumerable<favoritesWhereUniqueInput>
    set?: Enumerable<favoritesWhereUniqueInput>
    disconnect?: Enumerable<favoritesWhereUniqueInput>
    delete?: Enumerable<favoritesWhereUniqueInput>
    update?: Enumerable<favoritesUpdateWithWhereUniqueWithoutUserdataInput>
    updateMany?: Enumerable<favoritesUpdateManyWithWhereWithoutUserdataInput>
    deleteMany?: Enumerable<favoritesScalarWhereInput>
  }

  export type favoritesUncheckedUpdateManyWithoutUserdataInput = {
    create?: XOR<Enumerable<favoritesCreateWithoutUserdataInput>, Enumerable<favoritesUncheckedCreateWithoutUserdataInput>>
    connectOrCreate?: Enumerable<favoritesCreateOrConnectWithoutUserdataInput>
    upsert?: Enumerable<favoritesUpsertWithWhereUniqueWithoutUserdataInput>
    createMany?: favoritesCreateManyUserdataInputEnvelope
    connect?: Enumerable<favoritesWhereUniqueInput>
    set?: Enumerable<favoritesWhereUniqueInput>
    disconnect?: Enumerable<favoritesWhereUniqueInput>
    delete?: Enumerable<favoritesWhereUniqueInput>
    update?: Enumerable<favoritesUpdateWithWhereUniqueWithoutUserdataInput>
    updateMany?: Enumerable<favoritesUpdateManyWithWhereWithoutUserdataInput>
    deleteMany?: Enumerable<favoritesScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type moviesCreateWithoutCategoriesInput = {
    movieId: string
    name: string
    releaseDate?: Date | string | null
    movieLength: number
    description: string
    favorites?: favoritesCreateNestedManyWithoutMoviesInput
  }

  export type moviesUncheckedCreateWithoutCategoriesInput = {
    movieId: string
    name: string
    releaseDate?: Date | string | null
    movieLength: number
    description: string
    favorites?: favoritesUncheckedCreateNestedManyWithoutMoviesInput
  }

  export type moviesCreateOrConnectWithoutCategoriesInput = {
    where: moviesWhereUniqueInput
    create: XOR<moviesCreateWithoutCategoriesInput, moviesUncheckedCreateWithoutCategoriesInput>
  }

  export type moviesCreateManyCategoriesInputEnvelope = {
    data: Enumerable<moviesCreateManyCategoriesInput>
    skipDuplicates?: boolean
  }

  export type moviesUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: moviesWhereUniqueInput
    update: XOR<moviesUpdateWithoutCategoriesInput, moviesUncheckedUpdateWithoutCategoriesInput>
    create: XOR<moviesCreateWithoutCategoriesInput, moviesUncheckedCreateWithoutCategoriesInput>
  }

  export type moviesUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: moviesWhereUniqueInput
    data: XOR<moviesUpdateWithoutCategoriesInput, moviesUncheckedUpdateWithoutCategoriesInput>
  }

  export type moviesUpdateManyWithWhereWithoutCategoriesInput = {
    where: moviesScalarWhereInput
    data: XOR<moviesUpdateManyMutationInput, moviesUncheckedUpdateManyWithoutMoviesInput>
  }

  export type moviesScalarWhereInput = {
    AND?: Enumerable<moviesScalarWhereInput>
    OR?: Enumerable<moviesScalarWhereInput>
    NOT?: Enumerable<moviesScalarWhereInput>
    movieId?: StringFilter | string
    name?: StringFilter | string
    category?: StringFilter | string
    releaseDate?: DateTimeNullableFilter | Date | string | null
    movieLength?: IntFilter | number
    description?: StringFilter | string
  }

  export type moviesCreateWithoutFavoritesInput = {
    movieId: string
    name: string
    releaseDate?: Date | string | null
    movieLength: number
    description: string
    categories: categoriesCreateNestedOneWithoutMoviesInput
  }

  export type moviesUncheckedCreateWithoutFavoritesInput = {
    movieId: string
    name: string
    category: string
    releaseDate?: Date | string | null
    movieLength: number
    description: string
  }

  export type moviesCreateOrConnectWithoutFavoritesInput = {
    where: moviesWhereUniqueInput
    create: XOR<moviesCreateWithoutFavoritesInput, moviesUncheckedCreateWithoutFavoritesInput>
  }

  export type userdataCreateWithoutFavoritesInput = {
    userId: string
    createdAt?: Date | string
    email: string
    name: string
    surname: string
    password: string
  }

  export type userdataUncheckedCreateWithoutFavoritesInput = {
    userId: string
    createdAt?: Date | string
    email: string
    name: string
    surname: string
    password: string
  }

  export type userdataCreateOrConnectWithoutFavoritesInput = {
    where: userdataWhereUniqueInput
    create: XOR<userdataCreateWithoutFavoritesInput, userdataUncheckedCreateWithoutFavoritesInput>
  }

  export type moviesUpsertWithoutFavoritesInput = {
    update: XOR<moviesUpdateWithoutFavoritesInput, moviesUncheckedUpdateWithoutFavoritesInput>
    create: XOR<moviesCreateWithoutFavoritesInput, moviesUncheckedCreateWithoutFavoritesInput>
  }

  export type moviesUpdateWithoutFavoritesInput = {
    movieId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    movieLength?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    categories?: categoriesUpdateOneRequiredWithoutMoviesInput
  }

  export type moviesUncheckedUpdateWithoutFavoritesInput = {
    movieId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    movieLength?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type userdataUpsertWithoutFavoritesInput = {
    update: XOR<userdataUpdateWithoutFavoritesInput, userdataUncheckedUpdateWithoutFavoritesInput>
    create: XOR<userdataCreateWithoutFavoritesInput, userdataUncheckedCreateWithoutFavoritesInput>
  }

  export type userdataUpdateWithoutFavoritesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userdataUncheckedUpdateWithoutFavoritesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesCreateWithoutMoviesInput = {
    categoryId: string
  }

  export type categoriesUncheckedCreateWithoutMoviesInput = {
    categoryId: string
  }

  export type categoriesCreateOrConnectWithoutMoviesInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutMoviesInput, categoriesUncheckedCreateWithoutMoviesInput>
  }

  export type favoritesCreateWithoutMoviesInput = {
    userdata: userdataCreateNestedOneWithoutFavoritesInput
  }

  export type favoritesUncheckedCreateWithoutMoviesInput = {
    favoritesId?: number
    userId: string
  }

  export type favoritesCreateOrConnectWithoutMoviesInput = {
    where: favoritesWhereUniqueInput
    create: XOR<favoritesCreateWithoutMoviesInput, favoritesUncheckedCreateWithoutMoviesInput>
  }

  export type favoritesCreateManyMoviesInputEnvelope = {
    data: Enumerable<favoritesCreateManyMoviesInput>
    skipDuplicates?: boolean
  }

  export type categoriesUpsertWithoutMoviesInput = {
    update: XOR<categoriesUpdateWithoutMoviesInput, categoriesUncheckedUpdateWithoutMoviesInput>
    create: XOR<categoriesCreateWithoutMoviesInput, categoriesUncheckedCreateWithoutMoviesInput>
  }

  export type categoriesUpdateWithoutMoviesInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesUncheckedUpdateWithoutMoviesInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type favoritesUpsertWithWhereUniqueWithoutMoviesInput = {
    where: favoritesWhereUniqueInput
    update: XOR<favoritesUpdateWithoutMoviesInput, favoritesUncheckedUpdateWithoutMoviesInput>
    create: XOR<favoritesCreateWithoutMoviesInput, favoritesUncheckedCreateWithoutMoviesInput>
  }

  export type favoritesUpdateWithWhereUniqueWithoutMoviesInput = {
    where: favoritesWhereUniqueInput
    data: XOR<favoritesUpdateWithoutMoviesInput, favoritesUncheckedUpdateWithoutMoviesInput>
  }

  export type favoritesUpdateManyWithWhereWithoutMoviesInput = {
    where: favoritesScalarWhereInput
    data: XOR<favoritesUpdateManyMutationInput, favoritesUncheckedUpdateManyWithoutFavoritesInput>
  }

  export type favoritesScalarWhereInput = {
    AND?: Enumerable<favoritesScalarWhereInput>
    OR?: Enumerable<favoritesScalarWhereInput>
    NOT?: Enumerable<favoritesScalarWhereInput>
    favoritesId?: IntFilter | number
    userId?: StringFilter | string
    movieId?: StringFilter | string
  }

  export type favoritesCreateWithoutUserdataInput = {
    movies: moviesCreateNestedOneWithoutFavoritesInput
  }

  export type favoritesUncheckedCreateWithoutUserdataInput = {
    favoritesId?: number
    movieId: string
  }

  export type favoritesCreateOrConnectWithoutUserdataInput = {
    where: favoritesWhereUniqueInput
    create: XOR<favoritesCreateWithoutUserdataInput, favoritesUncheckedCreateWithoutUserdataInput>
  }

  export type favoritesCreateManyUserdataInputEnvelope = {
    data: Enumerable<favoritesCreateManyUserdataInput>
    skipDuplicates?: boolean
  }

  export type favoritesUpsertWithWhereUniqueWithoutUserdataInput = {
    where: favoritesWhereUniqueInput
    update: XOR<favoritesUpdateWithoutUserdataInput, favoritesUncheckedUpdateWithoutUserdataInput>
    create: XOR<favoritesCreateWithoutUserdataInput, favoritesUncheckedCreateWithoutUserdataInput>
  }

  export type favoritesUpdateWithWhereUniqueWithoutUserdataInput = {
    where: favoritesWhereUniqueInput
    data: XOR<favoritesUpdateWithoutUserdataInput, favoritesUncheckedUpdateWithoutUserdataInput>
  }

  export type favoritesUpdateManyWithWhereWithoutUserdataInput = {
    where: favoritesScalarWhereInput
    data: XOR<favoritesUpdateManyMutationInput, favoritesUncheckedUpdateManyWithoutFavoritesInput>
  }

  export type moviesCreateManyCategoriesInput = {
    movieId: string
    name: string
    releaseDate?: Date | string | null
    movieLength: number
    description: string
  }

  export type moviesUpdateWithoutCategoriesInput = {
    movieId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    movieLength?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    favorites?: favoritesUpdateManyWithoutMoviesInput
  }

  export type moviesUncheckedUpdateWithoutCategoriesInput = {
    movieId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    movieLength?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    favorites?: favoritesUncheckedUpdateManyWithoutMoviesInput
  }

  export type moviesUncheckedUpdateManyWithoutMoviesInput = {
    movieId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    movieLength?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type favoritesCreateManyMoviesInput = {
    favoritesId?: number
    userId: string
  }

  export type favoritesUpdateWithoutMoviesInput = {
    userdata?: userdataUpdateOneRequiredWithoutFavoritesInput
  }

  export type favoritesUncheckedUpdateWithoutMoviesInput = {
    favoritesId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type favoritesUncheckedUpdateManyWithoutFavoritesInput = {
    favoritesId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type favoritesCreateManyUserdataInput = {
    favoritesId?: number
    movieId: string
  }

  export type favoritesUpdateWithoutUserdataInput = {
    movies?: moviesUpdateOneRequiredWithoutFavoritesInput
  }

  export type favoritesUncheckedUpdateWithoutUserdataInput = {
    favoritesId?: IntFieldUpdateOperationsInput | number
    movieId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}